{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo } from 'react';\nimport { ColorBlock, Color as RcColor } from '@rc-component/color-picker';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport Collapse from '../../collapse';\nimport { useLocale } from '../../locale';\nimport { useToken } from '../../theme/internal';\nimport { generateColor } from '../util';\nvar genPresetColor = function genPresetColor(list) {\n  return list.map(function (value) {\n    value.colors = value.colors.map(generateColor);\n    return value;\n  });\n};\nvar isBright = function isBright(value, bgColorToken) {\n  var _value$toRgb = value.toRgb(),\n    r = _value$toRgb.r,\n    g = _value$toRgb.g,\n    b = _value$toRgb.b,\n    a = _value$toRgb.a;\n  var hsv = new RcColor(value.toRgbString()).onBackground(bgColorToken).toHsv();\n  if (a <= 0.5) {\n    // Adapted to dark mode\n    return hsv.v > 0.5;\n  }\n  return r * 0.299 + g * 0.587 + b * 0.114 > 192;\n};\nvar ColorPresets = function ColorPresets(_ref) {\n  var prefixCls = _ref.prefixCls,\n    presets = _ref.presets,\n    color = _ref.value,\n    onChange = _ref.onChange;\n  var _useLocale = useLocale('ColorPicker'),\n    _useLocale2 = _slicedToArray(_useLocale, 1),\n    locale = _useLocale2[0];\n  var _useToken = useToken(),\n    _useToken2 = _slicedToArray(_useToken, 2),\n    token = _useToken2[1];\n  var _useMergedState = useMergedState(genPresetColor(presets), {\n      value: genPresetColor(presets),\n      postState: genPresetColor\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 1),\n    presetsValue = _useMergedState2[0];\n  var colorPresetsPrefixCls = \"\".concat(prefixCls, \"-presets\");\n  var activeKeys = useMemo(function () {\n    return presetsValue.map(function (preset) {\n      return \"panel-\".concat(preset.label);\n    });\n  }, [presetsValue]);\n  var handleClick = function handleClick(colorValue) {\n    onChange === null || onChange === void 0 ? void 0 : onChange(colorValue);\n  };\n  var items = presetsValue.map(function (preset) {\n    var _a;\n    return {\n      key: \"panel-\".concat(preset.label),\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(colorPresetsPrefixCls, \"-label\")\n      }, preset === null || preset === void 0 ? void 0 : preset.label),\n      children: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"\".concat(colorPresetsPrefixCls, \"-items\")\n      }, Array.isArray(preset === null || preset === void 0 ? void 0 : preset.colors) && ((_a = preset.colors) === null || _a === void 0 ? void 0 : _a.length) > 0 ? preset.colors.map(function (presetColor, index) {\n        var _classNames;\n        return /*#__PURE__*/React.createElement(ColorBlock\n        // eslint-disable-next-line react/no-array-index-key\n        , {\n          // eslint-disable-next-line react/no-array-index-key\n          key: \"preset-\".concat(index, \"-\").concat(presetColor.toHexString()),\n          color: generateColor(presetColor).toRgbString(),\n          prefixCls: prefixCls,\n          className: classNames(\"\".concat(colorPresetsPrefixCls, \"-color\"), (_classNames = {}, _defineProperty(_classNames, \"\".concat(colorPresetsPrefixCls, \"-color-checked\"), presetColor.toHexString() === (color === null || color === void 0 ? void 0 : color.toHexString())), _defineProperty(_classNames, \"\".concat(colorPresetsPrefixCls, \"-color-bright\"), isBright(presetColor, token.colorBgElevated)), _classNames)),\n          onClick: function onClick() {\n            return handleClick(presetColor);\n          }\n        });\n      }) : /*#__PURE__*/React.createElement(\"span\", {\n        className: \"\".concat(colorPresetsPrefixCls, \"-empty\")\n      }, locale.presetEmpty))\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: colorPresetsPrefixCls\n  }, /*#__PURE__*/React.createElement(Collapse, {\n    defaultActiveKey: activeKeys,\n    ghost: true,\n    items: items\n  }));\n};\nexport default ColorPresets;","map":null,"metadata":{},"sourceType":"module"}