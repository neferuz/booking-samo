{"ast":null,"code":"\"use client\";\n\nimport _defineProperty from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useContext, useMemo, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport genPurePanel from '../_util/PurePanel';\nimport { getStatusClassNames } from '../_util/statusUtils';\nimport { devUseWarning } from '../_util/warning';\nimport { ConfigContext } from '../config-provider/context';\nimport useSize from '../config-provider/hooks/useSize';\nimport { FormItemInputContext, NoFormStyle } from '../form/context';\nimport Popover from '../popover';\nimport { useToken } from '../theme/internal';\nimport ColorPickerPanel from './ColorPickerPanel';\nimport ColorTrigger from './components/ColorTrigger';\nimport useColorState from './hooks/useColorState';\nimport useStyle from './style/index';\nimport { customizePrefixCls, genAlphaColor, generateColor, getAlphaColor } from './util';\nvar ColorPicker = function ColorPicker(props) {\n  var _classNames;\n  var value = props.value,\n    defaultValue = props.defaultValue,\n    format = props.format,\n    defaultFormat = props.defaultFormat,\n    _props$allowClear = props.allowClear,\n    allowClear = _props$allowClear === void 0 ? false : _props$allowClear,\n    presets = props.presets,\n    children = props.children,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? 'click' : _props$trigger,\n    open = props.open,\n    disabled = props.disabled,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? 'bottomLeft' : _props$placement,\n    _props$arrow = props.arrow,\n    arrow = _props$arrow === void 0 ? true : _props$arrow,\n    panelRender = props.panelRender,\n    showText = props.showText,\n    style = props.style,\n    className = props.className,\n    customizeSize = props.size,\n    rootClassName = props.rootClassName,\n    styles = props.styles,\n    _props$disabledAlpha = props.disabledAlpha,\n    disabledAlpha = _props$disabledAlpha === void 0 ? false : _props$disabledAlpha,\n    onFormatChange = props.onFormatChange,\n    onChange = props.onChange,\n    onClear = props.onClear,\n    onOpenChange = props.onOpenChange,\n    onChangeComplete = props.onChangeComplete,\n    getPopupContainer = props.getPopupContainer,\n    _props$autoAdjustOver = props.autoAdjustOverflow,\n    autoAdjustOverflow = _props$autoAdjustOver === void 0 ? true : _props$autoAdjustOver,\n    destroyTooltipOnHide = props.destroyTooltipOnHide;\n  var _useContext = useContext(ConfigContext),\n    getPrefixCls = _useContext.getPrefixCls,\n    direction = _useContext.direction,\n    colorPicker = _useContext.colorPicker;\n  var _useToken = useToken(),\n    _useToken2 = _slicedToArray(_useToken, 2),\n    token = _useToken2[1];\n  var _useColorState = useColorState(token.colorPrimary, {\n      value: value,\n      defaultValue: defaultValue\n    }),\n    _useColorState2 = _slicedToArray(_useColorState, 2),\n    colorValue = _useColorState2[0],\n    setColorValue = _useColorState2[1];\n  var _useMergedState = useMergedState(false, {\n      value: open,\n      postState: function postState(openData) {\n        return !disabled && openData;\n      },\n      onChange: onOpenChange\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    popupOpen = _useMergedState2[0],\n    setPopupOpen = _useMergedState2[1];\n  var _useMergedState3 = useMergedState(format, {\n      value: format,\n      defaultValue: defaultFormat,\n      onChange: onFormatChange\n    }),\n    _useMergedState4 = _slicedToArray(_useMergedState3, 2),\n    formatValue = _useMergedState4[0],\n    setFormatValue = _useMergedState4[1];\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    colorCleared = _useState2[0],\n    setColorCleared = _useState2[1];\n  var prefixCls = getPrefixCls('color-picker', customizePrefixCls);\n  var isAlphaColor = useMemo(function () {\n    return getAlphaColor(colorValue) < 100;\n  }, [colorValue]);\n  // ===================== Form Status =====================\n  var _React$useContext = React.useContext(FormItemInputContext),\n    contextStatus = _React$useContext.status; // ===================== Style =====================\n  var mergedSize = useSize(customizeSize);\n  var _useStyle = useStyle(prefixCls),\n    _useStyle2 = _slicedToArray(_useStyle, 2),\n    wrapSSR = _useStyle2[0],\n    hashId = _useStyle2[1];\n  var rtlCls = _defineProperty({}, \"\".concat(prefixCls, \"-rtl\"), direction);\n  var mergeRootCls = classNames(rootClassName, rtlCls);\n  var mergeCls = classNames(getStatusClassNames(prefixCls, contextStatus), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _classNames), colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.className, mergeRootCls, className, hashId);\n  var mergePopupCls = classNames(prefixCls, rtlCls);\n  var popupAllowCloseRef = useRef(true);\n  // ===================== Warning ======================\n  if (process.env.NODE_ENV !== 'production') {\n    var warning = devUseWarning('ColorPicker');\n    process.env.NODE_ENV !== \"production\" ? warning(!(disabledAlpha && isAlphaColor), 'usage', '`disabledAlpha` will make the alpha to be 100% when use alpha color.') : void 0;\n  }\n  var handleChange = function handleChange(data, type, pickColor) {\n    var color = generateColor(data);\n    var isNull = value === null || !value && defaultValue === null;\n    if (colorCleared || isNull) {\n      setColorCleared(false);\n      // ignore alpha slider\n      if (getAlphaColor(colorValue) === 0 && type !== 'alpha') {\n        color = genAlphaColor(color);\n      }\n    }\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      color = genAlphaColor(color);\n    }\n    // Only for drag-and-drop color picking\n    if (pickColor) {\n      popupAllowCloseRef.current = false;\n    } else {\n      onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(color);\n    }\n    setColorValue(color);\n    onChange === null || onChange === void 0 ? void 0 : onChange(color, color.toHexString());\n  };\n  var handleClear = function handleClear() {\n    setColorCleared(true);\n    onClear === null || onClear === void 0 ? void 0 : onClear();\n  };\n  var handleChangeComplete = function handleChangeComplete(color) {\n    popupAllowCloseRef.current = true;\n    var changeColor = generateColor(color);\n    // ignore alpha color\n    if (disabledAlpha && isAlphaColor) {\n      changeColor = genAlphaColor(color);\n    }\n    onChangeComplete === null || onChangeComplete === void 0 ? void 0 : onChangeComplete(changeColor);\n  };\n  var popoverProps = {\n    open: popupOpen,\n    trigger: trigger,\n    placement: placement,\n    arrow: arrow,\n    rootClassName: rootClassName,\n    getPopupContainer: getPopupContainer,\n    autoAdjustOverflow: autoAdjustOverflow,\n    destroyTooltipOnHide: destroyTooltipOnHide\n  };\n  var colorBaseProps = {\n    prefixCls: prefixCls,\n    color: colorValue,\n    allowClear: allowClear,\n    colorCleared: colorCleared,\n    disabled: disabled,\n    disabledAlpha: disabledAlpha,\n    presets: presets,\n    panelRender: panelRender,\n    format: formatValue,\n    onFormatChange: setFormatValue,\n    onChangeComplete: handleChangeComplete\n  };\n  var mergedStyle = Object.assign(Object.assign({}, colorPicker === null || colorPicker === void 0 ? void 0 : colorPicker.style), style);\n  return wrapSSR( /*#__PURE__*/React.createElement(Popover, Object.assign({\n    style: styles === null || styles === void 0 ? void 0 : styles.popup,\n    overlayInnerStyle: styles === null || styles === void 0 ? void 0 : styles.popupOverlayInner,\n    onOpenChange: function onOpenChange(visible) {\n      if (popupAllowCloseRef.current && !disabled) {\n        setPopupOpen(visible);\n      }\n    },\n    content: /*#__PURE__*/React.createElement(NoFormStyle, {\n      override: true,\n      status: true\n    }, /*#__PURE__*/React.createElement(ColorPickerPanel, Object.assign({}, colorBaseProps, {\n      onChange: handleChange,\n      onChangeComplete: handleChangeComplete,\n      onClear: handleClear\n    }))),\n    overlayClassName: mergePopupCls\n  }, popoverProps), children || /*#__PURE__*/React.createElement(ColorTrigger, {\n    open: popupOpen,\n    className: mergeCls,\n    style: mergedStyle,\n    color: value ? generateColor(value) : colorValue,\n    prefixCls: prefixCls,\n    disabled: disabled,\n    colorCleared: colorCleared,\n    showText: showText,\n    format: formatValue\n  })));\n};\nif (process.env.NODE_ENV !== 'production') {\n  ColorPicker.displayName = 'ColorPicker';\n}\nvar PurePanel = genPurePanel(ColorPicker, 'color-picker', /* istanbul ignore next */\nfunction (prefixCls) {\n  return prefixCls;\n}, function (props) {\n  return Object.assign(Object.assign({}, props), {\n    placement: 'bottom',\n    autoAdjustOverflow: false\n  });\n});\nColorPicker._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default ColorPicker;","map":null,"metadata":{},"sourceType":"module"}