{"ast":null,"code":"import _toConsumableArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nexport var processLazyPreloader = function processLazyPreloader(swiper, imageEl) {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  var slideSelector = function slideSelector() {\n    return swiper.isElement ? \"swiper-slide\" : \".\".concat(swiper.params.slideClass);\n  };\n  var slideEl = imageEl.closest(slideSelector());\n  if (slideEl) {\n    var lazyEl = slideEl.querySelector(\".\".concat(swiper.params.lazyPreloaderClass));\n    if (lazyEl) lazyEl.remove();\n  }\n};\nvar unlazy = function unlazy(swiper, index) {\n  if (!swiper.slides[index]) return;\n  var imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\n  if (imageEl) imageEl.removeAttribute('loading');\n};\nexport var preload = function preload(swiper) {\n  if (!swiper || swiper.destroyed || !swiper.params) return;\n  var amount = swiper.params.lazyPreloadPrevNext;\n  var len = swiper.slides.length;\n  if (!len || !amount || amount < 0) return;\n  amount = Math.min(amount, len);\n  var slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\n  var activeIndex = swiper.activeIndex;\n  if (swiper.params.grid && swiper.params.grid.rows > 1) {\n    var activeColumn = activeIndex;\n    var preloadColumns = [activeColumn - amount];\n    preloadColumns.push.apply(preloadColumns, _toConsumableArray(Array.from({\n      length: amount\n    }).map(function (_, i) {\n      return activeColumn + slidesPerView + i;\n    })));\n    swiper.slides.forEach(function (slideEl, i) {\n      if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\n    });\n    return;\n  }\n  var slideIndexLastInView = activeIndex + slidesPerView - 1;\n  if (swiper.params.rewind || swiper.params.loop) {\n    for (var i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\n      var realIndex = (i % len + len) % len;\n      if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\n    }\n  } else {\n    for (var _i = Math.max(activeIndex - amount, 0); _i <= Math.min(slideIndexLastInView + amount, len - 1); _i += 1) {\n      if (_i !== activeIndex && (_i > slideIndexLastInView || _i < activeIndex)) {\n        unlazy(swiper, _i);\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}