{"ast":null,"code":"import _slicedToArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMemo } from 'react';\nimport { devUseWarning } from '../../_util/warning';\nfunction getFilledItem(rowItem, rowRestCol, span) {\n  var clone = rowItem;\n  var exceed = false;\n  if (span === undefined || span > rowRestCol) {\n    clone = Object.assign(Object.assign({}, rowItem), {\n      span: rowRestCol\n    });\n    exceed = span !== undefined;\n  }\n  return [clone, exceed];\n}\n// Calculate the sum of span in a row\nfunction getCalcRows(rowItems, mergedColumn) {\n  var rows = [];\n  var tmpRow = [];\n  var rowRestCol = mergedColumn;\n  var exceed = false;\n  rowItems.filter(function (n) {\n    return n;\n  }).forEach(function (rowItem, index) {\n    var span = rowItem === null || rowItem === void 0 ? void 0 : rowItem.span;\n    var mergedSpan = span || 1;\n    // Additional handle last one\n    if (index === rowItems.length - 1) {\n      var _getFilledItem = getFilledItem(rowItem, rowRestCol, span),\n        _getFilledItem2 = _slicedToArray(_getFilledItem, 2),\n        item = _getFilledItem2[0],\n        itemExceed = _getFilledItem2[1];\n      exceed = exceed || itemExceed;\n      tmpRow.push(item);\n      rows.push(tmpRow);\n      return;\n    }\n    if (mergedSpan < rowRestCol) {\n      rowRestCol -= mergedSpan;\n      tmpRow.push(rowItem);\n    } else {\n      var _getFilledItem3 = getFilledItem(rowItem, rowRestCol, mergedSpan),\n        _getFilledItem4 = _slicedToArray(_getFilledItem3, 2),\n        _item = _getFilledItem4[0],\n        _itemExceed = _getFilledItem4[1];\n      exceed = exceed || _itemExceed;\n      tmpRow.push(_item);\n      rows.push(tmpRow);\n      rowRestCol = mergedColumn;\n      tmpRow = [];\n    }\n  });\n  return [rows, exceed];\n}\nvar useRow = function useRow(mergedColumn, items) {\n  var _useMemo = useMemo(function () {\n      return getCalcRows(items, mergedColumn);\n    }, [items, mergedColumn]),\n    _useMemo2 = _slicedToArray(_useMemo, 2),\n    rows = _useMemo2[0],\n    exceed = _useMemo2[1];\n  if (process.env.NODE_ENV !== 'production') {\n    var warning = devUseWarning('Descriptions');\n    process.env.NODE_ENV !== \"production\" ? warning(!exceed, 'usage', 'Sum of column `span` in a line not match `column` of Descriptions.') : void 0;\n  }\n  return rows;\n};\nexport default useRow;","map":null,"metadata":{},"sourceType":"module"}