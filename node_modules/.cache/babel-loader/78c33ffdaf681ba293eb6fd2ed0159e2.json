{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { render } from \"rc-util/es/React/render\";\nimport ConfigProvider, { globalConfig, warnContext } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nvar notification = null;\nvar act = function act(callback) {\n  return callback();\n};\nvar taskQueue = [];\nvar defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  var _defaultGlobalConfig = defaultGlobalConfig,\n    globalPrefixCls = _defaultGlobalConfig.prefixCls,\n    globalGetContainer = _defaultGlobalConfig.getContainer,\n    rtl = _defaultGlobalConfig.rtl,\n    maxCount = _defaultGlobalConfig.maxCount,\n    top = _defaultGlobalConfig.top,\n    bottom = _defaultGlobalConfig.bottom;\n  var mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  var mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    getContainer: function getContainer() {\n      return mergedContainer;\n    },\n    rtl: rtl,\n    maxCount: maxCount,\n    top: top,\n    bottom: bottom\n  };\n}\nvar GlobalHolder = /*#__PURE__*/React.forwardRef(function (_, ref) {\n  var _React$useState = React.useState(getGlobalContext),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    notificationConfig = _React$useState2[0],\n    setNotificationConfig = _React$useState2[1];\n  var _useInternalNotificat = useInternalNotification(notificationConfig),\n    _useInternalNotificat2 = _slicedToArray(_useInternalNotificat, 2),\n    api = _useInternalNotificat2[0],\n    holder = _useInternalNotificat2[1];\n  var global = globalConfig();\n  var rootPrefixCls = global.getRootPrefixCls();\n  var rootIconPrefixCls = global.getIconPrefixCls();\n  var theme = global.getTheme();\n  var sync = function sync() {\n    setNotificationConfig(getGlobalContext);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, function () {\n    var instance = Object.assign({}, api);\n    Object.keys(instance).forEach(function (method) {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance: instance,\n      sync: sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls,\n    theme: theme\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    var holderFragment = document.createDocumentFragment();\n    var newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(function () {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: function ref(node) {\n          var _ref = node || {},\n            instance = _ref.instance,\n            sync = _ref.sync;\n          Promise.resolve().then(function () {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(function (task) {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(function () {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(function () {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(function () {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  // Warning if exist theme\n  if (process.env.NODE_ENV !== 'production') {\n    warnContext('notification');\n  }\n  taskQueue.push({\n    type: 'open',\n    config: config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key: key\n  });\n  flushNotice();\n}\nvar methods = ['success', 'info', 'warning', 'error'];\nvar baseStaticMethods = {\n  open: open,\n  destroy: destroy,\n  config: setNotificationGlobalConfig,\n  useNotification: useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nvar staticMethods = baseStaticMethods;\nmethods.forEach(function (type) {\n  staticMethods[type] = function (config) {\n    return open(Object.assign(Object.assign({}, config), {\n      type: type\n    }));\n  };\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nvar noop = function noop() {};\n/** @internal Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport var actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = function actWrapper(wrapper) {\n    act = wrapper;\n  };\n}\nexport default staticMethods;","map":null,"metadata":{},"sourceType":"module"}