{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _inheritsLoose from '@babel/runtime/helpers/esm/inheritsLoose';\nimport _assertThisInitialized from '@babel/runtime/helpers/esm/assertThisInitialized';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport invariant from 'invariant';\nimport json2mq from 'json2mq';\nvar MediaQueryListener = /*#__PURE__*/\nfunction () {\n  function MediaQueryListener(targetWindow, query, listener) {\n    var _this = this;\n    this.nativeMediaQueryList = targetWindow.matchMedia(query);\n    this.active = true; // Safari doesn't clear up listener with removeListener\n    // when the listener is already waiting in the event queue.\n    // Having an active flag to make sure the listener is not called\n    // after we removeListener.\n\n    this.cancellableListener = function () {\n      _this.matches = _this.nativeMediaQueryList.matches;\n      if (_this.active) {\n        listener.apply(void 0, arguments);\n      }\n    };\n    this.nativeMediaQueryList.addListener(this.cancellableListener);\n    this.matches = this.nativeMediaQueryList.matches;\n  }\n  var _proto = MediaQueryListener.prototype;\n  _proto.cancel = function cancel() {\n    this.active = false;\n    this.nativeMediaQueryList.removeListener(this.cancellableListener);\n  };\n  return MediaQueryListener;\n}();\nvar queryType = PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.arrayOf(PropTypes.object.isRequired)]);\n/**\n * Conditionally renders based on whether or not a media query matches.\n */\n\nvar Media = /*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Media, _React$Component);\n  function Media(props) {\n    var _this;\n    _this = _React$Component.call(this, props) || this;\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"queries\", []);\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"getMatches\", function () {\n      var result = _this.queries.reduce(function (acc, _ref) {\n        var _extends2;\n        var name = _ref.name,\n          mqListener = _ref.mqListener;\n        return _extends({}, acc, (_extends2 = {}, _extends2[name] = mqListener.matches, _extends2));\n      }, {}); // return result;\n\n      return unwrapSingleQuery(result);\n    });\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"updateMatches\", function () {\n      var newMatches = _this.getMatches();\n      _this.setState(function () {\n        return {\n          matches: newMatches\n        };\n      }, _this.onChange);\n    });\n    !(!(!props.query && !props.queries) || props.query && props.queries) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '<Media> must be supplied with either \"query\" or \"queries\"') : invariant(false) : void 0;\n    !(props.defaultMatches === undefined || !props.query || typeof props.defaultMatches === \"boolean\") ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"<Media> when query is set, defaultMatches must be a boolean, received \" + typeof props.defaultMatches) : invariant(false) : void 0;\n    !(props.defaultMatches === undefined || !props.queries || typeof props.defaultMatches === \"object\") ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"<Media> when queries is set, defaultMatches must be a object of booleans, received \" + typeof props.defaultMatches) : invariant(false) : void 0;\n    if (typeof window !== \"object\") {\n      // In case we're rendering on the server, apply the default matches\n      var matches;\n      if (props.defaultMatches !== undefined) {\n        matches = props.defaultMatches;\n      } else if (props.query) {\n        matches = true;\n      }\n      /* if (props.queries) */else {\n        matches = Object.keys(_this.props.queries).reduce(function (acc, key) {\n          var _extends3;\n          return _extends({}, acc, (_extends3 = {}, _extends3[key] = true, _extends3));\n        }, {});\n      }\n      _this.state = {\n        matches: matches\n      };\n      return _assertThisInitialized(_this);\n    }\n    _this.initialize(); // Instead of calling this.updateMatches, we manually set the initial state to prevent\n    // calling setState, which could trigger an unnecessary second render\n\n    _this.state = {\n      matches: _this.props.defaultMatches !== undefined ? _this.props.defaultMatches : _this.getMatches()\n    };\n    _this.onChange();\n    return _this;\n  }\n  var _proto = Media.prototype;\n  _proto.initialize = function initialize() {\n    var _this2 = this;\n    var targetWindow = this.props.targetWindow || window;\n    !(typeof targetWindow.matchMedia === \"function\") ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"<Media targetWindow> does not support `matchMedia`.\") : invariant(false) : void 0;\n    var queries = this.props.queries || wrapInQueryObject(this.props.query);\n    this.queries = Object.keys(queries).map(function (name) {\n      var query = queries[name];\n      var qs = typeof query !== \"string\" ? json2mq(query) : query;\n      var mqListener = new MediaQueryListener(targetWindow, qs, _this2.updateMatches);\n      return {\n        name: name,\n        mqListener: mqListener\n      };\n    });\n  };\n  _proto.componentDidMount = function componentDidMount() {\n    this.initialize(); // If props.defaultMatches has been set, ensure we trigger a two-pass render.\n    // This is useful for SSR with mismatching defaultMatches vs actual matches from window.matchMedia\n    // Details: https://github.com/ReactTraining/react-media/issues/81\n\n    if (this.props.defaultMatches !== undefined) {\n      this.updateMatches();\n    }\n  };\n  _proto.onChange = function onChange() {\n    var onChange = this.props.onChange;\n    if (onChange) {\n      onChange(this.state.matches);\n    }\n  };\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.queries.forEach(function (_ref2) {\n      var mqListener = _ref2.mqListener;\n      return mqListener.cancel();\n    });\n  };\n  _proto.render = function render() {\n    var _this$props = this.props,\n      children = _this$props.children,\n      render = _this$props.render;\n    var matches = this.state.matches;\n    var isAnyMatches = typeof matches === \"object\" ? Object.keys(matches).some(function (key) {\n      return matches[key];\n    }) : matches;\n    return render ? isAnyMatches ? render(matches) : null : children ? typeof children === \"function\" ? children(matches) : !Array.isArray(children) || children.length // Preact defaults to empty children array\n    ? isAnyMatches ?\n    // We have to check whether child is a composite component or not to decide should we\n    // provide `matches` as a prop or not\n    React.Children.only(children) && typeof React.Children.only(children).type === \"string\" ? React.Children.only(children) : React.cloneElement(React.Children.only(children), {\n      matches: matches\n    }) : null : null : null;\n  };\n  return Media;\n}(React.Component);\n/**\n * Wraps a single query in an object. This is used to provide backward compatibility with\n * the old `query` prop (as opposed to `queries`). If only a single query is passed, the object\n * will be unpacked down the line, but this allows our internals to assume an object of queries\n * at all times.\n */\n\n_defineProperty(Media, \"propTypes\", {\n  defaultMatches: PropTypes.oneOfType([PropTypes.bool, PropTypes.objectOf(PropTypes.bool)]),\n  query: queryType,\n  queries: PropTypes.objectOf(queryType),\n  render: PropTypes.func,\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  targetWindow: PropTypes.object,\n  onChange: PropTypes.func\n});\nfunction wrapInQueryObject(query) {\n  return {\n    __DEFAULT__: query\n  };\n}\n/**\n * Unwraps an object of queries, if it was originally passed as a single query.\n */\n\nfunction unwrapSingleQuery(queryObject) {\n  var queryNames = Object.keys(queryObject);\n  if (queryNames.length === 1 && queryNames[0] === \"__DEFAULT__\") {\n    return queryObject.__DEFAULT__;\n  }\n  return queryObject;\n}\nexport default Media;","map":null,"metadata":{},"sourceType":"module"}