{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { getStyleStr } from './utils';\n/**\n * Base size of the canvas, 1 for parallel layout and 2 for alternate layout\n * Only alternate layout is currently supported\n */\nexport var BaseSize = 2;\nexport var FontGap = 3;\nexport default function useWatermark(markStyle) {\n  var _React$useState = React.useState(function () {\n      return new Map();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 1),\n    watermarkMap = _React$useState2[0];\n  var appendWatermark = function appendWatermark(base64Url, markWidth, container) {\n    if (container) {\n      if (!watermarkMap.get(container)) {\n        var newWatermarkEle = document.createElement('div');\n        watermarkMap.set(container, newWatermarkEle);\n      }\n      var watermarkEle = watermarkMap.get(container);\n      watermarkEle.setAttribute('style', getStyleStr(Object.assign(Object.assign({}, markStyle), {\n        backgroundImage: \"url('\".concat(base64Url, \"')\"),\n        backgroundSize: \"\".concat(Math.floor(markWidth), \"px\")\n      })));\n      container.append(watermarkEle);\n    }\n  };\n  var removeWatermark = function removeWatermark(container) {\n    var watermarkEle = watermarkMap.get(container);\n    if (watermarkEle && container) {\n      container.removeChild(watermarkEle);\n    }\n    watermarkMap.delete(container);\n  };\n  var isWatermarkEle = function isWatermarkEle(ele) {\n    return Array.from(watermarkMap.values()).includes(ele);\n  };\n  return [appendWatermark, removeWatermark, isWatermarkEle];\n}","map":null,"metadata":{},"sourceType":"module"}