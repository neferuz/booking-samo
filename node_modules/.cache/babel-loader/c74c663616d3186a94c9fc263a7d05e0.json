{"ast":null,"code":"import _slicedToArray from \"/Users/feruzxasanov/Downloads/booking samo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable no-redeclare */\nimport { useContext } from 'react';\nimport { useStyleRegister } from '@ant-design/cssinjs';\nimport { warning } from 'rc-util';\nimport { ConfigContext } from '../../config-provider/context';\nimport { genCommonStyle, genLinkStyle } from '../../style';\nimport useToken from '../useToken';\nimport statisticToken, { merge as mergeToken } from './statistic';\nimport useResetIconStyle from './useResetIconStyle';\nexport default function genComponentStyleHook(componentName, styleFn, getDefaultToken) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var cells = Array.isArray(componentName) ? componentName : [componentName, componentName];\n  var _cells = _slicedToArray(cells, 1),\n    component = _cells[0];\n  var concatComponent = cells.join('-');\n  return function (prefixCls) {\n    var _useToken = useToken(),\n      _useToken2 = _slicedToArray(_useToken, 3),\n      theme = _useToken2[0],\n      token = _useToken2[1],\n      hashId = _useToken2[2];\n    var _useContext = useContext(ConfigContext),\n      getPrefixCls = _useContext.getPrefixCls,\n      iconPrefixCls = _useContext.iconPrefixCls,\n      csp = _useContext.csp;\n    var rootPrefixCls = getPrefixCls();\n    // Shared config\n    var sharedConfig = {\n      theme: theme,\n      token: token,\n      hashId: hashId,\n      nonce: function nonce() {\n        return csp === null || csp === void 0 ? void 0 : csp.nonce;\n      },\n      clientOnly: options.clientOnly,\n      // antd is always at top of styles\n      order: options.order || -999\n    };\n    // Generate style for all a tags in antd component.\n    useStyleRegister(Object.assign(Object.assign({}, sharedConfig), {\n      clientOnly: false,\n      path: ['Shared', rootPrefixCls]\n    }), function () {\n      return [{\n        // Link\n        '&': genLinkStyle(token)\n      }];\n    });\n    // Generate style for icons\n    useResetIconStyle(iconPrefixCls);\n    return [useStyleRegister(Object.assign(Object.assign({}, sharedConfig), {\n      path: [concatComponent, prefixCls, iconPrefixCls]\n    }), function () {\n      var _statisticToken = statisticToken(token),\n        proxyToken = _statisticToken.token,\n        flush = _statisticToken.flush;\n      var customComponentToken = Object.assign({}, token[component]);\n      if (options.deprecatedTokens) {\n        var deprecatedTokens = options.deprecatedTokens;\n        deprecatedTokens.forEach(function (_ref) {\n          var _ref3 = _slicedToArray(_ref, 2),\n            oldTokenKey = _ref3[0],\n            newTokenKey = _ref3[1];\n          var _a;\n          if (process.env.NODE_ENV !== 'production') {\n            process.env.NODE_ENV !== \"production\" ? warning(!(customComponentToken === null || customComponentToken === void 0 ? void 0 : customComponentToken[oldTokenKey]), \"The token '\".concat(String(oldTokenKey), \"' of \").concat(component, \" had deprecated, use '\").concat(String(newTokenKey), \"' instead.\")) : void 0;\n          }\n          // Should wrap with `if` clause, or there will be `undefined` in object.\n          if ((customComponentToken === null || customComponentToken === void 0 ? void 0 : customComponentToken[oldTokenKey]) || (customComponentToken === null || customComponentToken === void 0 ? void 0 : customComponentToken[newTokenKey])) {\n            (_a = customComponentToken[newTokenKey]) !== null && _a !== void 0 ? _a : customComponentToken[newTokenKey] = customComponentToken === null || customComponentToken === void 0 ? void 0 : customComponentToken[oldTokenKey];\n          }\n        });\n      }\n      var defaultComponentToken = typeof getDefaultToken === 'function' ? getDefaultToken(mergeToken(proxyToken, customComponentToken !== null && customComponentToken !== void 0 ? customComponentToken : {})) : getDefaultToken;\n      var mergedComponentToken = Object.assign(Object.assign({}, defaultComponentToken), customComponentToken);\n      var componentCls = \".\".concat(prefixCls);\n      var mergedToken = mergeToken(proxyToken, {\n        componentCls: componentCls,\n        prefixCls: prefixCls,\n        iconCls: \".\".concat(iconPrefixCls),\n        antCls: \".\".concat(rootPrefixCls)\n      }, mergedComponentToken);\n      var styleInterpolation = styleFn(mergedToken, {\n        hashId: hashId,\n        prefixCls: prefixCls,\n        rootPrefixCls: rootPrefixCls,\n        iconPrefixCls: iconPrefixCls,\n        overrideComponentToken: customComponentToken\n      });\n      flush(component, mergedComponentToken);\n      return [options.resetStyle === false ? null : genCommonStyle(token, prefixCls), styleInterpolation];\n    }), hashId];\n  };\n}\nexport var genSubStyleComponent = function genSubStyleComponent(componentName, styleFn, getDefaultToken, options) {\n  var useStyle = genComponentStyleHook(componentName, styleFn, getDefaultToken, Object.assign({\n    resetStyle: false,\n    // Sub Style should default after root one\n    order: -998\n  }, options));\n  var StyledComponent = function StyledComponent(_ref2) {\n    var prefixCls = _ref2.prefixCls;\n    useStyle(prefixCls);\n    return null;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    StyledComponent.displayName = \"SubStyle_\".concat(Array.isArray(componentName) ? componentName.join('.') : componentName);\n  }\n  return StyledComponent;\n};","map":null,"metadata":{},"sourceType":"module"}